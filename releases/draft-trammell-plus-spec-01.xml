<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.31 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-trammell-plus-spec-01" category="exp">

  <front>
    <title abbrev="PLUS Spec">Path Layer UDP Substrate Specification</title>

    <author initials="B." surname="Trammell" fullname="Brian Trammell">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>ietf@trammell.ch</email>
      </address>
    </author>
    <author initials="M." surname="Kuehlewind" fullname="Mirja Kuehlewind">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>mirja.kuehlewind@tik.ee.ethz.ch</email>
      </address>
    </author>

    <date year="2017" month="March" day="13"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies a common Path Layer UDP Substrate (PLUS) wire image
for encrypted transport protocols carried over UDP. The base PLUS header
carries information for driving a minimal state machine at middleboxes
described in <xref target="I-D.trammell-plus-statefulness"/>, and provides optional
exposure of additional information to devices along the path using the
mechanism described in <xref target="I-D.trammell-plus-abstract-mech"/>.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document defines a wire image for a Path Layer UDP Substrate (PLUS), for
limited exposure of information from encrypted, UDP-encapsulated <xref target="RFC0768"/>
transport protocols. The wire image implements signaling to drive the minimal
state machine defined in <xref target="I-D.trammell-plus-statefulness"/> as well as optional
exposure of additional information to devices along the path using the mechanism
described in <xref target="I-D.trammell-plus-abstract-mech"/>.</t>

<t>As discussed in <xref target="I-D.hardie-path-signals"/>, basic information about flows
currently exposed by TCP are missing from transport protocols that encrypt
their headers. Given the ossification of protocol wire images due to the
widespread deployment of stateful network devices that rely on header
inspection, this header encryption is necessary to support transport protocol
evolution. However, the loss of basic information for on-path state
maintenance as well as network performance measurement, diagnostics, and
troubleshooting via header encryption makes network management more difficult.
The PLUS wire image defined by this document aims to mitigate this difficulty,
allowing deployment of encrypted protocols without loss of essential in-
network functionality.</t>

<t>This wire image is intended primarily to support state maintenance and
measurement; the principles of measurement and primitives we aim to support
are drawn from recent work on explicit measurability in protocol design
<xref target="IPIM"/>.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The words “MUST”, “MUST NOT”, “SHOULD”, and “MAY” are used in this document.
It’s not shouting; when these words are capitalized, they have a special meaning
as defined in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="basic-header" title="State Maintenance and Measurement: Basic Header">

<t>Every packet in each direction of a flow using PLUS carries a PLUS header. This
can be either a basic header, or an extended header. The PLUS basic header
supports multiplexing using a connection token; basic state maintenance using
association and confirmation signals, packet serial numbers, and a two-way stop
signal; and basic measurability using packet serial number echo. The format of
the basic header, together with the UDP header, is shown in
<xref target="fig-header-basic"/>.</t>

<t>The extended header is defined in <xref target="extended-header"/>.</t>

<figure title="PLUS header with basic exposure" anchor="fig-header-basic"><artwork><![CDATA[
  3                   2                   1
1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
+------------------------------+-------------------------------+
|       UDP source port        |      UDP destination port     |
+------------------------------+-------------------------------+
|       UDP length             |      UDP checksum             |
+------------------------------+-----------------------+-+-+-+-+
|                            magic                     |L|R|S|0|
+------------------------------------------------------+-+-+-+-+
|                                                              |
+-             connection/association token CAT               -+
|                                                              |
+--------------------------------------------------------------+
|                 packet serial number  PSN                    |
+--------------------------------------------------------------+
|                 packet serial echo    PSE                    |
+--------------------------------------------------------------+
/                                                              \
\         transport protocol header/payload (encrypted)        /
/                                                              \
]]></artwork></figure>

<t>Fields are encoded in network byte order and are defined as follows:</t>

<t><list style="symbols">
  <t>magic: A 28-bit number identifying this packet as carrying a PLUS header. This
magic number is chosen to avoid collision with possible values of the first
four bytes of widely deployed protocols on UDP. The value 0xd8007ff has been
provisionally selected for the PLUS magic number based of experience with the
SPUD prototype, a cursory survey of common UDP protocols, and compatibility
with <xref target="RFC8035"/>.</t>
  <t>flags: four bits carrying additional information:
  <list style="symbols">
      <t>LoLa flag (L): Packet is latency sensitive and prefers drop to delay when set.</t>
      <t>RoI flag (R): Packet is not sensitive to reordering when set.</t>
      <t>Stop flag (S): Packet carries a stop or stop confirmation when set.</t>
      <t>Extended Header bit: Flag bit 0x01 is zero in packets with a Basic Header.</t>
    </list></t>
  <t>Connection/Association Token (CAT): A 64-bit token identifying this 
association. The CAT should be chosen randomly by the connection initiator. 
The CAT performs two functions in the PLUS header:  <list style="symbols">
      <t>Multiplexing: PLUS packets on the same 5-tuple with a different CAT value 
are taken to belong to a separate flow, with completely separate
state.</t>
      <t>Rebinding: A PLUS packet sharing one endpoint (source address/port 
pair, or destination address/port pair) and the CAT with an existing 
flow is taken to belong to that flow, since the other endpoint 
identifier has changed due to a mobility event or address translation 
change.</t>
    </list></t>
  <t>Packet Serial Number (PSN): A 32-bit serial number for this packet. The
first PSN for each direction in a flow is chosen randomly, and subsequent
packets increment the PSN by one. The PSN wraps around.</t>
  <t>Packet Serial Echo (PSE): The most recent PSN seen by the
sender in the opposite direction before this packet was sent.</t>
</list></t>

<t>Since PLUS is designed to be used for UDP-encapsulated, encrypted transport
protocols, overlying transports are presumed to provide encryption and
integrity protection for their own headers. For the sake of efficiency, it is
also assumed that this integrity protection can be extended to the bits in the
PLUS Basic Header.</t>

<section anchor="sender-behavior" title="Sender Behavior">

<t>When a sender has a packet ready to send using PLUS, it determines the values
in the Basic Header as follows:</t>

<t><list style="symbols">
  <t>The magic number is set to the constant 0xd8007ff.</t>
  <t>If the sender is the flow initiator, and the packet is the first packet in
the flow, the sender selects a cryptographically random 64-bit number for
the CAT. When multiplexing, it must ensure the CAT is not already in use for
the 5-tuple. Otherwise, the sender uses the CAT associated with the flow.</t>
  <t>If the packet is the first packet in the flow in this direction, the sender
selects a cryptographically random 32-bit number for the PSN. Otherwise, the
sender adds one to the PSN on the last packet it sent in this flow, and uses
that value for the PSN. If the last PSN is 0xffffffff, it wraps around,
setting the PSN to 0x00000001. A PSN of 0x00000000 is never sent.</t>
  <t>If the packet is the first packet in the flow in this direction, the sender
sets the PSE to 0x00000000. Otherwise it sets the PSE to the PSN of the last
packet seen in the opposite direction.</t>
  <t>If the overlying transport determines that this packet is loss-insensitive
but latency-sensitive, the sender sets the L flag.</t>
  <t>If the overlying transport determines that this packet may be freely
reordered, the sender sets the R flag.</t>
  <t>If the overlying transport determines that the connection is shutting down,
and no further packets will be sent in this direction other than packets part of
this shutdown, the sender sets the S flag; see <xref target="twostop"/> for details.</t>
</list></t>

</section>
<section anchor="receiver-behavior" title="Receiver Behavior">

<t>When a receiver receives a packet containing a PLUS Basic Header, it processes
the values in the Basic Header as follows:</t>

<t><list style="symbols">
  <t>It verifies that the magic number is the constant 0xd800fff. If the receiver
is expecting a PLUS packet, and it does not see this value, it drops the
packet without further processing.</t>
  <t>It verifies the integrity of the information in the PLUS Basic Header, using
information carried in the overlying transport. Packets failing integrity
checks SHOULD be dropped, but MAY be further analyzed by the receiver to
determine the likely cause of verification failure; reaction to the failure is
transport and implementation specific.</t>
  <t>It stores the PSN to be sent as the PSE on the the next packet it sends in
the opposite direction.</t>
</list></t>

</section>
<section anchor="on-path-state-maintenance-using-the-basic-header" title="On-Path State Maintenance using the Basic Header">

<t>The basic header provides all the signals necessary to drive the transport-
independent state machine described in <xref target="I-D.trammell-plus-statefulness"/>, as
shown in <xref target="fig-states"/>.</t>

<figure title="Transport-independent state machine as implemented by PLUS" anchor="fig-states"><artwork><![CDATA[
    `- - - - - - - - - - - - - - - - - - - - - - - - - - - -'
    `    +============+    a->b    +============+           '
    `   /              \--------->/              \<-+       '
  +--->(      zero      )        (    uniflow     ) | a->b  '
  ^ `   \              /<---------\              /--+       '
  | `    +============+  TO_IDLE   +============+           '
  | `- - - - - - - - - - - - - - -  | b->a - - - - - - - - -'
  |                                 V
  |                          +============+  
  | TO_IDLE                 /              \ 
  +<-----------------------(  associating   )
  |                         \              / 
  |                          +============+  
  |                                 | a->b
  |                                 V       
  |                          +============+ 
  | TO_ASSOCIATED           /              \<-+     
  +<-----------------------(   associated   ) | a<->b
  |                         \              /--+     
  |                          +============+ 
  |                             | stop y->z   
  |                             V             
  |                    +============+  
  | TO_ASSOCIATED     /              \<-+     
  +<-----------------(    stop-wait   ) | a<->b
  |                   \              /--+          
  |                   +============+       
  |                       | stop z->y
  |                       V
  |              +============+
  | TO_STOPPING /              \
  +------------(    stopping     )
                \              /
                 +============+
]]></artwork></figure>

<section anchor="state-establishment" title="State Establishment">

<t>On the first packet with a PLUS header forwarded by an on-path device for a
given 5-tuple plus CAT, the device moves that flow from the zero state to the
uniflow state. The device retuens the flow to zero state after not seeing a
packet on the same flow in the same direction with the same CAT within a
timeout interval TO_IDLE. Otherwise, it stays in uniflow state and continues
forwarding packets, as long as it only observes packets in the same direction
as the initial packet. (the a-&gt;b direction in <xref target="fig-states"/>).</t>

<t>A PLUS-aware on-path device forwarding a packet with a PLUS header with a
reversed 5-tuple and identical CAT (the b-&gt;a direction in <xref target="fig-states"/>) to a
flow in the uniflow state, moves that flow to the associating state. It then
waits to see a packet with a PSE in the a-&gt;b direction equal to the PSN on the
first reverse packet; on receipt of this packet, the device moves the flow to
associated state. Otherwise, it drops state after a timeout interval TO_IDLE.</t>

<t>Once a flow has moved to the associated state, it will remain in that state
for a timeout interval TO_ASSOCIATED. The on-path device forwards any packet
with a PLUS header in either direction for this flow. It resets the
TO_ASSOCIATED timer for every packet it forwards in this state.</t>

</section>
<section anchor="twostop" title="Bidirectional Stop Signaling">

<t>A PLUS-aware on-path device forwarding a packet for a flow in the associated
state with an S flag set moves that flow to stop-wait state. It stores the
PSN on the packet causing the transition, and continues forwarding packets as
if in associated state, dropping state on timeout interval TO_ASSOCIATED.</t>

<t>When it sees a packet in the opposite direction with the S flag set and the
PSE set to exactly the stored PSN, it transitions the flow to stopping state.
The device will forward packets in both directions for flows in the stopping
state within a timeout interval TO_STOPPING; these packets will not reset the
timer.</t>

<t>Note that even though the S flag is integrity-protected end to end, a packet
with the S flag set could be forged by one on-path device to drive the flow
into stop-wait state on all downstream devices. However, this forgery is of
severely limited utility. First, it would require coordination between
attackers on both sides of a given on-path device in order to forge a
confirmation of the stop signal – a flag with the S bit set and a valid PSE
corresponding to the PSN of the first stop signal to drive the flow into
stopping state. Second, the information in the Basic Header on each packet will
drive the state machine into associated state even in the middle of a flow,
enabling fast recovery even in the case of such a coordinated attack.</t>

</section>
<section anchor="state-rebinding" title="State Rebinding">

<t>One end of a PLUS association may change its address while maintaining on-path
state; e.g. due to a NAT change. A PLUS-aware on-path device that forwards a
packet for a flow in the zero state, where one of the endpoint identifiers
(address and port) and the CAT, but not the other endpoint identifier, match a
flow in a non-zero state, treats that packet as belonging to the existing flow,
and updates the endpoint identifier.</t>

</section>
</section>
<section anchor="measurement-and-diagnosis-using-the-basic-header" title="Measurement and Diagnosis using the Basic Header">

<t>The basic header trivially supports passive two-way delay measurement as well
as partial loss estimation at a single observation point on path.</t>

<t>To calculate two-way delay, an observation point calculates the delay between
seeing a PSN and a corresponding PSE in each direction, then adds the delays
from each direction together. The fact that the PSN increments by one for
every packet makes this measurement much simpler than the equivalent measurement
using TCP sequence and acknowledgment numbers.</t>

<t>[EDITOR’S NOTE: specify this fully.]</t>

<t>Loss and reordering upstream from an observation point in each direction can be
estimated through examination of the PSN sequence observed. A skipped PSN not
seen within a specified interval can be counted as a lost packet, and the
extent of reordering estimated by the degree of skipping seen in those skipped
PSNs that are later observed. Since PLUS does not expose information about
retransmissions (and, indeed, may not even carry a transport that uses
retransmission for loss recovery), loss downstream from the observation point
cannot be observed.</t>

</section>
</section>
<section anchor="extended-header" title="Path Communication: Extended Header">

<t>Additional facilities for communicating with on-path devices under endpoint
control are provided by the PLUS Extended Header. The extended header shares the
layout of its first 20 bytes with the PLUS Basic Header, except the Extended
Header bit (0x01 on byte 11) is set. As with the Basic Header, overlying
transports are presumed to provide encryption and integrity protection for the
PLUS Extended Header. The Extended Header has a 1-byte type field, a 6-bit
length field, a 2-bit Integrity indicator, and variable-length value field for
the Path Communication Function (PCF):</t>

<t><list style="symbols">
  <t>PCF Type: a 1-byte value defining the type and semantics of the PCF value. Types 0x00 and 0xff are special and further explained below.</t>
  <t>PDF Integrity indication field: a 2-bit field indicating how much of the PCF value field is integrity protected:
  <list style="symbols">
      <t>00: the PCF field is not integrity protected.</t>
      <t>01: the first quarter of the PCF value field is integrity protected, rounded up to the nearest bit.</t>
      <t>10: the first half of the PCF value field is integrity protected, rounded up to the nearest bit.</t>
      <t>11: the whole PCF field is integrity protected.</t>
    </list></t>
  <t>PCF Length: a 6-bit field indicating the length of the variable length value field.</t>
  <t>PCF Value: variable-length field containing a value of the type described in the PCF Type field.</t>
</list></t>

<figure title="PLUS extended header with 1-byte PCF" anchor="fig-header-pcf1"><artwork><![CDATA[
  3                   2                   1
1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
+------------------------------+-------------------------------+
|       UDP source port        |      UDP destination port     |
+------------------------------+-------------------------------+
|       UDP length             |      UDP checksum             |
+------------------------------+-----------------------+-+-+-+-+
|                            magic                     |L|R|S|1|
+------------------------------------------------------+-+-+-+-+
|                                                              |
+-             connection/association token CAT               -+
|                                                              |
+--------------------------------------------------------------+
|                 packet serial number  PSN                    |
+--------------------------------------------------------------+
|                 packet serial echo    PSE                    |
+---------------+-----------+---+------------------------------+
|   PCF Type    |  PCF Len  | I |                              \
+---------------+-----------+---+    PCF value (variable)      /
/                                                              \
+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
\                                                              /
/         transport protocol header/payload (encrypted)        \
\                                                              /
]]></artwork></figure>

<t>The extended header is generally used to expose or request information from/to the path.
If the value field is integrity protected it MUST NOT be changed by an element 
on the network path and provides only consumable information. Non-integrity protected parts
of the value field carry a scratch space for path elements to provide the requested
information defined by the PCF type. The type of the PCF determines the semantics of the value
field and limits the intended use of the scratch space. A middlebox only needs to
check for PCF types that are relevant for the function that middlebox provides. 
Knowing the type, also means that the semantics of the value field are fully known.
Therefore a middlebox does not need to check the length and integrity field. These 
field are provided for receiver-side handling on unknown PCF types.</t>

<t>If a sender requests information from a path, these are generally used to expose
information about the traffic for measurement or diagnostic purposes. These
signals generally take the form of accumulators: initialized to some value by
the sender, and subject to some aggregation function by each on-path device that
understands them. In any case, the information sent and received is to be
treated as advisory only, given its integrity cannot be checked.</t>

<t>A PLUS receiver that receives a PLUS packet with an extended header and an
unknown PCF type where the integrity indication is smaller than 11, MUST feed
the non-integrity-protected part of the PCF value field back to the sender,
using an encrypted feedback channel provided by the upper layer protocol. The
sender usually consumes this data as it has requested it previously from the
path. The sender SHOULD check the reasonability of the received information, as follows:</t>

<t><list style="symbols">
  <t>If the information was intended to be consumed by the receiver instead of the
sender, reflecting  the receiver indicates by reflecting this information that the PFC is
unknown.</t>
  <t>If the value field is unchanged from its initial value, this may indicate that
there is no path element on the current path that supports the requested PCF.
However, as the path can change, a PLUS sender might re-try to requested the
information at a later point of time or if any indication is received that the
path might have changed.</t>
  <t>If the PCF value field has an invalid or unreasonable value regarding the
requested PCF type, this may be an indication that the scratch space is misused,
and the sender SHOULD NOT use this extended header PCF on this path anymore.</t>
</list></t>

<t>The PCF types 0x00 and 0xff are used for special purposes. 0x00 indicates that
another 1-byte type field is followed (before the length and integrity
indication) to provide future extensibility. The type 0xff indicates that that
PLUS payload data follows (without a PDF length and integrity indication). The
semantics of this PLUS payload are not specified in this revision of this
document but e.g. can be used to carry ICMP messages over PLUS.</t>

<t>If the length field is zero, the integrity indication field is not specified and
reserved for future use. It MUST be set to zero and ignored by the receiver.</t>

<section anchor="measurement-and-diagnostics-using-the-extended-header" title="Measurement and Diagnostics using the Extended Header">

<t>We have identified the following signals that can be exposed by the sender as
potentially useful for measurement and diagnostic purposes. These signals are
advisory only, and should not be presumed by either the endpoints or devices
along the path to affect forwarding behavior. Details of type and encoding for these information</t>

<t><list style="symbols">
  <t>Packet number echo delta time. Exposes the
interval between the receipt of the packet whose number appears in the PSE and
the transmission of this packet, as in section 4.1.2 of <xref target="IPIM"/>. Together with
analysis of the PSN and PSE sequence, this allows high-precision RTT estimation.
The encoding of this field is TBD.</t>
  <t>Timestamp (Type 0x22, 3-byte sender to path). Similar to TCP timestamps in
<xref target="RFC7323"/>, allows constant-rate clock exposure to devices on path. Note that
this is less necessary for RTT measurement of one-sided flows than it is in TCP,
due to the properties of the PSN and PSE values in the Basic Header. [EDITOR’S
NOTE: is this useful enough to keep?]</t>
  <t>Timestamp Echo. Echo of the last received
timestamp, as above. [EDITOR’S NOTE: as above, is this useful enough to keep?]</t>
  <t>Congestion Exposure. The sender exposes the number of observed losses and ECN
marks <xref target="RFC3168"/>. The path observes the information over time and derive
information about the current whole-path congestion, as currently provided by
counting retransmission on TCP, the RTCP Extended Report (XR) block for periodic
ECN feedback <xref target="RFC6679"/>, or ConEx for IPv6 <xref target="RFC7837"/>. The encoding of this
field is TBD.</t>
</list></t>

<t>We have identified the following signals for request from the path as potentially
useful. Note that accumulated values for use at the sender must be fed back to
the sender by the overlying transport, and that the presence of non-PLUS aware
devices on path at breaks in MTU mean that the accumulated value can only be
used as a hint to processes for measurement and discovery of the accumulated
values at the sender.</t>

<t><list style="symbols">
  <t>State timeout accumulator: This signal
allows measurement of timeouts from PLUS-aware devices. It is initialized to a
maximum (“no information”) value by the sender. A PLUS-aware forwarding device
on path receiving this value fills in the minimum of the received value and
the configured timeout for the flow’s present state into this field. The
encoding of this field is TBD.</t>
  <t>Rate limit accumulator: This signal
allows exposure of rate limiting along the path. It is initialized to a
maximum (“no information”) value by the sender. A PLUS-aware forwarding device
on path receiving this value fills in the minimum of the received value and
the rate limit to which this flow is subject into this field. The encoding of
this field is TBD.</t>
  <t>MTU accumulator: This signal allows
measurement of MTU information from PLUS-aware devices. The sender sets the
initial value to the sender’s MTU. A PLUS-aware forwarding device on path
receiving this value fills in the minimum of the received value and the MTU of
the next hop, in bytes into this field. The information, when fed back to the sender,
can be used as a hint for a running PLPMTUD <xref target="RFC4821"/> process.</t>
  <t>Trace accumulator. This signal allows
exposure of a trace of PLUS-aware devices on path, similar to the Path Changes
mechanism in section 4.3 of <xref target="IPIM"/>. The sender initializes the value to a
value chosen randomly for the flow; all packets in the flow using path trace
accumulator must use the same initial value. A PLUS-aware forwarding device on
path receiving this value fills in the result of XORing the received value
with a randomly chosen device identifier, which it must use for all path trace
accumulator signals it participates in. Packets traversing the same set of
PLUS-aware forwarding devices in the same flow therefore arrive at the
receiver with the same accumulated value, and changes to the set of devices on
path can be detected by the receiver.</t>
</list></t>

</section>
</section>
<section anchor="implementation-and-deployment-considerations" title="Implementation and Deployment Considerations">

<t>Here we discuss considerations for the implementation of overlying transports on PLUS, and their deployment in the Internet</t>

<section anchor="interface-to-overlying-transport" title="Interface to Overlying Transport">

<t>[EDITOR’S NOTE: Since the overlying transport is responsible for providing the cryptographic context used for integrity protection and feedback, and may be responsible for feedback as well, the “northbound” interface needs to be concretely specified in a future revision of this document.]</t>

</section>
<section anchor="discovery" title="Discovery">

<t>[EDITOR’S NOTE: Discovery is currently explicitly out of band. Should there be a way for a PLUS-aware overlying transport to discover whether its peer wants to use a PLUS- or non-PLUS variant of the transport? This is a specific case of the generalized multi-transport discovery and negotiation problem, so whatever happens here should be interoperable with deployed/deployable approaches.]</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA. Path communication field types and PLUS
magic numbers may be moved to a Standards Action registry in a future
revision.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document describes the PLUS Basic and Extended Headers, and the protocol
they support. This protocol can be used to expose information to devices along
the path to replace the analysis of transport- and application-layer headers
when those headers are encrypted. Care must be taken in the exposure of such
information to ensure no irrelevant application and/or user confidential
information is exposed.</t>

<t>PLUS itself contains some security-relevant features. In concert with an
encrypted overlying transport, the PLUS Basic and Extended Headers are
integrity-protected to prevent manipulation on-path of any value except Path to
Receiver values; this integrity protection prevents path elements from injecting 
values without explicit sender involvement, or from being stripped
from the PLUS Extended Header.</t>

<t>The CAT and PSE described in <xref target="basic-header"/> taken together, provide entropy
to prevent on-path devices from being driven into incorrect states by off-path
attackers. Bidirectional stop signaling as in <xref target="twostop"/> requires an on-path
attacker of a given middlebox to forge traffic on both of the middlebox’s
interfaces to drive a middlebox to inappropriately drop state for a flow.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This work is partially supported by the European Commission under Horizon 2020
grant agreement no. 688421 Measurement and Architecture for a Middleboxed
Internet (MAMI), and by the Swiss State Secretariat for Education, Research, and
Innovation under contract no. 15.0268. This support does not imply endorsement.
Thanks to Ted Hardie, Joe Hildebrand, Mark Nottingham, and the participants of
the PLUS BoF at IETF 96 in Berlin for input leading to this design; and to Gorry
Fairhurst for the detailed review.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor='RFC0768' target='http://www.rfc-editor.org/info/rfc768'>
<front>
<title>User Datagram Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<date year='1980' month='August' />
</front>
<seriesInfo name='STD' value='6'/>
<seriesInfo name='RFC' value='768'/>
<seriesInfo name='DOI' value='10.17487/RFC0768'/>
</reference>



<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor='RFC2474' target='http://www.rfc-editor.org/info/rfc2474'>
<front>
<title>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
<author initials='K.' surname='Nichols' fullname='K. Nichols'><organization /></author>
<author initials='S.' surname='Blake' fullname='S. Blake'><organization /></author>
<author initials='F.' surname='Baker' fullname='F. Baker'><organization /></author>
<author initials='D.' surname='Black' fullname='D. Black'><organization /></author>
<date year='1998' month='December' />
<abstract><t>This document defines the IP header field, called the DS (for differentiated services) field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2474'/>
<seriesInfo name='DOI' value='10.17487/RFC2474'/>
</reference>



<reference  anchor='RFC4821' target='http://www.rfc-editor.org/info/rfc4821'>
<front>
<title>Packetization Layer Path MTU Discovery</title>
<author initials='M.' surname='Mathis' fullname='M. Mathis'><organization /></author>
<author initials='J.' surname='Heffner' fullname='J. Heffner'><organization /></author>
<date year='2007' month='March' />
<abstract><t>This document describes a robust method for Path MTU Discovery (PMTUD) that relies on TCP or some other Packetization Layer to probe an Internet path with progressively larger packets.  This method is described as an extension to RFC 1191 and RFC 1981, which specify ICMP-based Path MTU Discovery for IP versions 4 and 6, respectively.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4821'/>
<seriesInfo name='DOI' value='10.17487/RFC4821'/>
</reference>



<reference  anchor='RFC3168' target='http://www.rfc-editor.org/info/rfc3168'>
<front>
<title>The Addition of Explicit Congestion Notification (ECN) to IP</title>
<author initials='K.' surname='Ramakrishnan' fullname='K. Ramakrishnan'><organization /></author>
<author initials='S.' surname='Floyd' fullname='S. Floyd'><organization /></author>
<author initials='D.' surname='Black' fullname='D. Black'><organization /></author>
<date year='2001' month='September' />
<abstract><t>This memo specifies the incorporation of ECN (Explicit Congestion Notification) to TCP and IP, including ECN's use of two bits in the IP header.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3168'/>
<seriesInfo name='DOI' value='10.17487/RFC3168'/>
</reference>



<reference  anchor='RFC6679' target='http://www.rfc-editor.org/info/rfc6679'>
<front>
<title>Explicit Congestion Notification (ECN) for RTP over UDP</title>
<author initials='M.' surname='Westerlund' fullname='M. Westerlund'><organization /></author>
<author initials='I.' surname='Johansson' fullname='I. Johansson'><organization /></author>
<author initials='C.' surname='Perkins' fullname='C. Perkins'><organization /></author>
<author initials='P.' surname='O&apos;Hanlon' fullname='P. O&apos;Hanlon'><organization /></author>
<author initials='K.' surname='Carlberg' fullname='K. Carlberg'><organization /></author>
<date year='2012' month='August' />
<abstract><t>This memo specifies how Explicit Congestion Notification (ECN) can be used with the Real-time Transport Protocol (RTP) running over UDP, using the RTP Control Protocol (RTCP) as a feedback mechanism.  It defines a new RTCP Extended Report (XR) block for periodic ECN feedback, a new RTCP transport feedback message for timely reporting of congestion events, and a Session Traversal Utilities for NAT (STUN) extension used in the optional initialisation method using Interactive Connectivity Establishment (ICE).  Signalling and procedures for negotiation of capabilities and initialisation methods are also defined.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6679'/>
<seriesInfo name='DOI' value='10.17487/RFC6679'/>
</reference>



<reference  anchor='RFC7837' target='http://www.rfc-editor.org/info/rfc7837'>
<front>
<title>IPv6 Destination Option for Congestion Exposure (ConEx)</title>
<author initials='S.' surname='Krishnan' fullname='S. Krishnan'><organization /></author>
<author initials='M.' surname='Kuehlewind' fullname='M. Kuehlewind'><organization /></author>
<author initials='B.' surname='Briscoe' fullname='B. Briscoe'><organization /></author>
<author initials='C.' surname='Ralli' fullname='C. Ralli'><organization /></author>
<date year='2016' month='May' />
<abstract><t>Congestion Exposure (ConEx) is a mechanism by which senders inform the network about the congestion encountered by packets earlier in the same flow.  This document specifies an IPv6 destination option that is capable of carrying ConEx markings in IPv6 datagrams.</t></abstract>
</front>
<seriesInfo name='RFC' value='7837'/>
<seriesInfo name='DOI' value='10.17487/RFC7837'/>
</reference>



<reference  anchor='RFC7675' target='http://www.rfc-editor.org/info/rfc7675'>
<front>
<title>Session Traversal Utilities for NAT (STUN) Usage for Consent Freshness</title>
<author initials='M.' surname='Perumal' fullname='M. Perumal'><organization /></author>
<author initials='D.' surname='Wing' fullname='D. Wing'><organization /></author>
<author initials='R.' surname='Ravindranath' fullname='R. Ravindranath'><organization /></author>
<author initials='T.' surname='Reddy' fullname='T. Reddy'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson'><organization /></author>
<date year='2015' month='October' />
<abstract><t>To prevent WebRTC applications, such as browsers, from launching attacks by sending traffic to unwilling victims, periodic consent to send needs to be obtained from remote endpoints.</t><t>This document describes a consent mechanism using a new Session Traversal Utilities for NAT (STUN) usage.</t></abstract>
</front>
<seriesInfo name='RFC' value='7675'/>
<seriesInfo name='DOI' value='10.17487/RFC7675'/>
</reference>



<reference  anchor='RFC7323' target='http://www.rfc-editor.org/info/rfc7323'>
<front>
<title>TCP Extensions for High Performance</title>
<author initials='D.' surname='Borman' fullname='D. Borman'><organization /></author>
<author initials='B.' surname='Braden' fullname='B. Braden'><organization /></author>
<author initials='V.' surname='Jacobson' fullname='V. Jacobson'><organization /></author>
<author initials='R.' surname='Scheffenegger' fullname='R. Scheffenegger' role='editor'><organization /></author>
<date year='2014' month='September' />
<abstract><t>This document specifies a set of TCP extensions to improve performance over paths with a large bandwidth * delay product and to provide reliable operation over very high-speed paths.  It defines the TCP Window Scale (WS) option and the TCP Timestamps (TS) option and their semantics.  The Window Scale option is used to support larger receive windows, while the Timestamps option can be used for at least two distinct mechanisms, Protection Against Wrapped Sequences (PAWS) and Round-Trip Time Measurement (RTTM), that are also described herein.</t><t>This document obsoletes RFC 1323 and describes changes from it.</t></abstract>
</front>
<seriesInfo name='RFC' value='7323'/>
<seriesInfo name='DOI' value='10.17487/RFC7323'/>
</reference>



<reference  anchor='RFC8035' target='http://www.rfc-editor.org/info/rfc8035'>
<front>
<title>Session Description Protocol (SDP) Offer/Answer Clarifications for RTP/RTCP Multiplexing</title>
<author initials='C.' surname='Holmberg' fullname='C. Holmberg'><organization /></author>
<date year='2016' month='November' />
<abstract><t>This document updates RFC 5761 by clarifying the SDP offer/answer negotiation of RTP and RTP Control Protocol (RTCP) multiplexing.  It makes it clear that an answerer can only include an &quot;a=rtcp-mux&quot; attribute in a Session Description Protocol (SDP) answer if the associated SDP offer contained the attribute.</t></abstract>
</front>
<seriesInfo name='RFC' value='8035'/>
<seriesInfo name='DOI' value='10.17487/RFC8035'/>
</reference>



<reference anchor='I-D.hardie-path-signals'>
<front>
<title>Path signals</title>

<author initials='T' surname='Hardie' fullname='Ted Hardie'>
    <organization />
</author>

<date month='October' day='28' year='2016' />

<abstract><t>TCP's state mechanics uses a series of well-known messages that are exchanged in the clear.  Because these are visible to network elements on the path between the two nodes setting up the transport connection, they are often used as signals by those network elements. In transports that do not exchange these messages in the clear, on- path network elements lack those signals.  This document discusses the nature of the signals as they are seen by on-path elements and reflects on best practices for transports which encrypt their state mechanics.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-hardie-path-signals-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-hardie-path-signals-00.txt' />
</reference>



<reference anchor='I-D.trammell-plus-abstract-mech'>
<front>
<title>Abstract Mechanisms for a Cooperative Path Layer under Endpoint Control</title>

<author initials='B' surname='Trammell' fullname='Brian Trammell'>
    <organization />
</author>

<date month='September' day='28' year='2016' />

<abstract><t>draft-trammell-plus-abstract-mech-00  Abstract  This document describes the operation of three abstract mechanisms for supporting an explicitly cooperative path layer in the Internet architecture.  Three mechanisms are described: sender to path signaling with receiver integrity verification; path to receiver signaling with confidential feedback to sender; and direct path to sender signaling.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-trammell-plus-abstract-mech-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-trammell-plus-abstract-mech-00.txt' />
</reference>



<reference anchor='I-D.trammell-plus-statefulness'>
<front>
<title>Transport-Independent Path Layer State Management</title>

<author initials='M' surname='Kuehlewind' fullname='Mirja Kuehlewind'>
    <organization />
</author>

<author initials='B' surname='Trammell' fullname='Brian Trammell'>
    <organization />
</author>

<author initials='J' surname='Hildebrand' fullname='Joe Hildebrand'>
    <organization />
</author>

<date month='December' day='22' year='2016' />

<abstract><t>This document describes a simple state machine for stateful network devices on a path between two endpoints to associate state with traffic traversing them on a per-flow basis, as well as abstract signaling mechanisms for driving the state machine.  This state machine is intended to replace the de-facto use of the TCP state machine or incomplete forms thereof by stateful network devices in a transport-independent way, while still allowing for fast state timeout of non-established or undesirable flows.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-trammell-plus-statefulness-02' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-trammell-plus-statefulness-02.txt' />
</reference>



<reference anchor='I-D.ietf-quic-transport'>
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>

<author initials='J' surname='Iyengar' fullname='Janardhan Iyengar'>
    <organization />
</author>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='January' day='14' year='2017' />

<abstract><t>QUIC is a multiplexed and secure transport protocol that runs on top of UDP.  QUIC builds on past transport experience, and implements mechanisms that make it useful as a modern general-purpose transport protocol.  Using UDP as the basis of QUIC is intended to address compatibility issues with legacy clients and middleboxes.  QUIC authenticates all of its headers, preventing third parties from changing them.  QUIC encrypts most of its headers, thereby limiting protocol evolution to QUIC endpoints only.  Therefore, middleboxes, in large part, are not required to be updated as new protocol versions are deployed.  This document describes the core QUIC protocol, including the conceptual design, wire format, and mechanisms of the QUIC protocol for connection establishment, stream multiplexing, stream and connection-level flow control, and data reliability.  Accompanying documents describe QUIC's loss recovery and congestion control, and the use of TLS 1.3 for key negotiation.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-transport-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-transport-01.txt' />
</reference>


<reference anchor="IPIM" >
  <front>
    <title>Principles for Measurability in Protocol Design (arXiv preprint 1612.02902)</title>
    <author initials="M." surname="Allman">
      <organization></organization>
    </author>
    <author initials="R." surname="Beverly">
      <organization></organization>
    </author>
    <author initials="B." surname="Trammell">
      <organization></organization>
    </author>
    <date year="2016" month="December" day="09"/>
  </front>
</reference>


    </references>



  </back>
</rfc>

